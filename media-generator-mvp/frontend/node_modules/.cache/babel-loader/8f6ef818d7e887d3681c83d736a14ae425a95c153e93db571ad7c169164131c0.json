{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Interceptor per gestire errori globali\n    this.api.interceptors.response.use(response => response, error => {\n      console.error('API Error:', error);\n      return Promise.reject(error);\n    });\n  }\n\n  // User Management\n  async getUsers() {\n    const response = await this.api.get('/users');\n    return response.data.data || [];\n  }\n  async getUserById(id) {\n    const response = await this.api.get(`/users/${id}`);\n    return response.data.data || null;\n  }\n\n  // Project Management\n  async createProject(projectData) {\n    const response = await this.api.post('/projects', projectData);\n    return response.data.data;\n  }\n  async getProjects(userId) {\n    const url = userId ? `/projects?userId=${userId}` : '/projects';\n    const response = await this.api.get(url);\n    return response.data.data || [];\n  }\n  async getProjectById(id) {\n    const response = await this.api.get(`/projects/${id}`);\n    return response.data.data || null;\n  }\n\n  // Alias for consistency with ProjectDetail component\n  async getProject(id) {\n    const response = await this.api.get(`/projects/${id}`);\n    return response.data;\n  }\n  async updateProject(id, updates) {\n    const response = await this.api.put(`/projects/${id}`, updates);\n    return response.data.data;\n  }\n  async deleteProject(id) {\n    await this.api.delete(`/projects/${id}`);\n  }\n\n  // Text Processing\n  async uploadTextFile(file, onProgress) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await this.api.post('/text/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        if (onProgress && progressEvent.total) {\n          const progress = {\n            loaded: progressEvent.loaded,\n            total: progressEvent.total,\n            percentage: Math.round(progressEvent.loaded * 100 / progressEvent.total)\n          };\n          onProgress(progress);\n        }\n      }\n    });\n    return response.data.data;\n  }\n  async analyzeText(text) {\n    const response = await this.api.post('/text/analyze', {\n      text\n    });\n    return response.data.data || [];\n  }\n  async analyzeTextScenes(text) {\n    var _response$data$data;\n    const response = await this.api.post('/analyze-text', {\n      text\n    });\n    return ((_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.scenes) || [];\n  }\n\n  // Image Generation\n  async generateImages(projectId, chunks) {\n    await this.api.post(`/projects/${projectId}/generate-images`, {\n      chunks\n    });\n  }\n  async generateAudio(projectId, chunks) {\n    await this.api.post(`/projects/${projectId}/generate-audio`, {\n      chunks\n    });\n  }\n  async generateVideo(projectId) {\n    await this.api.post(`/projects/${projectId}/generate-video`);\n  }\n\n  // Validation\n  async validateGeneration(projectId) {\n    const response = await this.api.post(`/projects/${projectId}/validate`);\n    return response.data.data;\n  }\n\n  // Book Catalog\n  async getBookCatalog() {\n    const response = await this.api.get('/books');\n    return response.data.data || [];\n  }\n  async getBookById(id) {\n    const response = await this.api.get(`/books/${id}`);\n    return response.data.data || null;\n  }\n  async getBookContent(id) {\n    var _response$data$data2;\n    const response = await this.api.get(`/books/${id}/content`);\n    return ((_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.content) || '';\n  }\n  // WebSocket per updates in tempo reale\n  connectToProject(projectId) {\n    if (typeof window !== 'undefined' && 'WebSocket' in window) {\n      const wsUrl = `ws://localhost:8000/ws/projects/${projectId}`;\n      return new WebSocket(wsUrl);\n    }\n    return null;\n  }\n\n  // Alias for consistency with ProjectDetail component\n  connectWebSocket(projectId) {\n    return this.connectToProject(projectId);\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","response","use","error","console","Promise","reject","getUsers","get","data","getUserById","id","createProject","projectData","post","getProjects","userId","url","getProjectById","getProject","updateProject","updates","put","deleteProject","delete","uploadTextFile","file","onProgress","formData","FormData","append","onUploadProgress","progressEvent","total","progress","loaded","percentage","Math","round","analyzeText","text","analyzeTextScenes","_response$data$data","scenes","generateImages","projectId","chunks","generateAudio","generateVideo","validateGeneration","getBookCatalog","getBookById","getBookContent","_response$data$data2","content","connectToProject","window","wsUrl","WebSocket","connectWebSocket","apiService"],"sources":["C:/Users/mario/Desktop/Partenostera/media-generator-mvp/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { \r\n  Project, \r\n  User, \r\n  BookCatalogItem, \r\n  TextChunk, \r\n  ValidationResult, \r\n  ApiResponse,\r\n  UploadProgress,\r\n  Scene\r\n} from '../types';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Interceptor per gestire errori globali\r\n    this.api.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        console.error('API Error:', error);\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // User Management\r\n  async getUsers(): Promise<User[]> {\r\n    const response: AxiosResponse<ApiResponse<User[]>> = await this.api.get('/users');\r\n    return response.data.data || [];\r\n  }\r\n\r\n  async getUserById(id: string): Promise<User | null> {\r\n    const response: AxiosResponse<ApiResponse<User>> = await this.api.get(`/users/${id}`);\r\n    return response.data.data || null;\r\n  }\r\n\r\n  // Project Management\r\n  async createProject(projectData: {\r\n    userId: string;\r\n    title: string;\r\n    description: string;\r\n    textContent: string;\r\n  }): Promise<Project> {\r\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.post('/projects', projectData);\r\n    return response.data.data!;\r\n  }\r\n\r\n  async getProjects(userId?: string): Promise<Project[]> {\r\n    const url = userId ? `/projects?userId=${userId}` : '/projects';\r\n    const response: AxiosResponse<ApiResponse<Project[]>> = await this.api.get(url);\r\n    return response.data.data || [];\r\n  }\r\n  async getProjectById(id: string): Promise<Project | null> {\r\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.get(`/projects/${id}`);\r\n    return response.data.data || null;\r\n  }\r\n\r\n  // Alias for consistency with ProjectDetail component\r\n  async getProject(id: string): Promise<ApiResponse<Project>> {\r\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.get(`/projects/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\r\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.put(`/projects/${id}`, updates);\r\n    return response.data.data!;\r\n  }\r\n\r\n  async deleteProject(id: string): Promise<void> {\r\n    await this.api.delete(`/projects/${id}`);\r\n  }\r\n\r\n  // Text Processing\r\n  async uploadTextFile(\r\n    file: File, \r\n    onProgress?: (progress: UploadProgress) => void\r\n  ): Promise<{ textContent: string; chunks: TextChunk[] }> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const response: AxiosResponse<ApiResponse<{ textContent: string; chunks: TextChunk[] }>> = \r\n      await this.api.post('/text/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress && progressEvent.total) {\r\n            const progress: UploadProgress = {\r\n              loaded: progressEvent.loaded,\r\n              total: progressEvent.total,\r\n              percentage: Math.round((progressEvent.loaded * 100) / progressEvent.total),\r\n            };\r\n            onProgress(progress);\r\n          }\r\n        },\r\n      });\r\n\r\n    return response.data.data!;\r\n  }\r\n  async analyzeText(text: string): Promise<TextChunk[]> {\r\n    const response: AxiosResponse<ApiResponse<TextChunk[]>> = await this.api.post('/text/analyze', { text });\r\n    return response.data.data || [];\r\n  }\r\n  async analyzeTextScenes(text: string): Promise<Scene[]> {\r\n    const response: AxiosResponse<ApiResponse<{ scenes: Scene[] }>> = await this.api.post('/analyze-text', { text });\r\n    return response.data.data?.scenes || [];\r\n  }\r\n\r\n  // Image Generation\r\n  async generateImages(projectId: string, chunks: TextChunk[]): Promise<void> {\r\n    await this.api.post(`/projects/${projectId}/generate-images`, { chunks });\r\n  }\r\n\r\n  async generateAudio(projectId: string, chunks: TextChunk[]): Promise<void> {\r\n    await this.api.post(`/projects/${projectId}/generate-audio`, { chunks });\r\n  }\r\n\r\n  async generateVideo(projectId: string): Promise<void> {\r\n    await this.api.post(`/projects/${projectId}/generate-video`);\r\n  }\r\n\r\n  // Validation\r\n  async validateGeneration(projectId: string): Promise<ValidationResult> {\r\n    const response: AxiosResponse<ApiResponse<ValidationResult>> = \r\n      await this.api.post(`/projects/${projectId}/validate`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  // Book Catalog\r\n  async getBookCatalog(): Promise<BookCatalogItem[]> {\r\n    const response: AxiosResponse<ApiResponse<BookCatalogItem[]>> = await this.api.get('/books');\r\n    return response.data.data || [];\r\n  }\r\n\r\n  async getBookById(id: string): Promise<BookCatalogItem | null> {\r\n    const response: AxiosResponse<ApiResponse<BookCatalogItem>> = await this.api.get(`/books/${id}`);\r\n    return response.data.data || null;\r\n  }\r\n\r\n  async getBookContent(id: string): Promise<string> {\r\n    const response: AxiosResponse<ApiResponse<{ content: string }>> = \r\n      await this.api.get(`/books/${id}/content`);\r\n    return response.data.data?.content || '';\r\n  }\r\n  // WebSocket per updates in tempo reale\r\n  connectToProject(projectId: string): WebSocket | null {\r\n    if (typeof window !== 'undefined' && 'WebSocket' in window) {\r\n      const wsUrl = `ws://localhost:8000/ws/projects/${projectId}`;\r\n      return new WebSocket(wsUrl);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Alias for consistency with ProjectDetail component\r\n  connectWebSocket(projectId: string): WebSocket | null {\r\n    return this.connectToProject(projectId);\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService();\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}